// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'chrome://new-tab-page/customize_dialog.js';

import {BrowserProxy} from 'chrome://new-tab-page/browser_proxy.js';
import {assertStyle, TestProxy} from 'chrome://test/new_tab_page/test_support.js';
import {flushTasks} from 'chrome://test/test_util.m.js';

suite('NewTabPageCustomizeDialogTest', () => {
  /** @type {TestProxy} */
  let testProxy;

  /** @return {!CustomizeDialogElement} */
  function createCustomizeDialog() {
    const customizeDialog = document.createElement('ntp-customize-dialog');
    document.body.appendChild(customizeDialog);
    return customizeDialog;
  }


  /** @return {!CustomizeDialogElement} */
  function createCustomizeDialogWithThemes(themes) {
    const customizeInfo = Promise.resolve({
      info: {
        currentTheme: {type: newTabPage.mojom.ThemeType.DEFAULT},
        chromeThemes: themes,
      },
    });
    testProxy.handler.setResultFor('getCustomizeInfo', customizeInfo);
    return createCustomizeDialog();
  }

  setup(() => {
    PolymerTest.clearBody();

    testProxy = new TestProxy();
    BrowserProxy.instance_ = testProxy;
  });

  test('opening dialog shows theme tiles', async () => {
    // Act.
    const themes = [
      {
        id: 0,
        label: 'theme_0',
        colors: {
          frame: {value: 0x000000},      // white.
          activeTab: {value: 0x0000ff},  // blue.
        },
      },
      {
        id: 1,
        label: 'theme_1',
        colors: {
          frame: {value: 0xff0000},      // red.
          activeTab: {value: 0x00ff00},  // green.
        },
      },
    ];
    testProxy.handler.setResultFor('getCustomizeInfo', Promise.resolve({
      info: {
        currentTheme: {type: newTabPage.mojom.ThemeType.DEFAULT},
        chromeThemes: themes
      }
    }));
    const getCustomizeInfoCalled =
        testProxy.handler.whenCalled('getCustomizeInfo');

    // Act.
    const customizeDialog = createCustomizeDialogWithThemes(themes);
    await getCustomizeInfoCalled;
    await flushTasks();

    // Assert.
    const tiles = customizeDialog.shadowRoot.querySelectorAll('ntp-theme-icon');
    assertEquals(tiles.length, 4);
    assertEquals(tiles[2].getAttribute('title'), 'theme_0');
    assertStyle(tiles[2], '--ntp-theme-icon-frame-color', 'rgb(0, 0, 0)');
    assertStyle(
        tiles[2], '--ntp-theme-icon-active-tab-color', 'rgb(0, 0, 255)');
    assertEquals(tiles[3].getAttribute('title'), 'theme_1');
    assertStyle(tiles[3], '--ntp-theme-icon-frame-color', 'rgb(255, 0, 0)');
    assertStyle(
        tiles[3], '--ntp-theme-icon-active-tab-color', 'rgb(0, 255, 0)');
  });

  test('clicking default theme calls applying default theme', async () => {
    // Arrange.
    const customizeDialog = createCustomizeDialog();
    const applyDefaultThemeCalled =
        testProxy.handler.whenCalled('applyDefaultTheme');

    // Act.
    customizeDialog.$.defaultTheme.click();

    // Assert.
    await applyDefaultThemeCalled;
  });

  test('selecting color calls applying autogenerated theme', async () => {
    // Arrange.
    const customizeDialog = createCustomizeDialog();
    const applyAutogeneratedThemeCalled =
        testProxy.handler.whenCalled('applyAutogeneratedTheme');

    // Act.
    customizeDialog.$.colorPicker.value = '#ff0000';
    customizeDialog.$.colorPicker.dispatchEvent(new Event('change'));

    // Assert.
    const {value} = await applyAutogeneratedThemeCalled;
    assertEquals(value, 0xffff0000);
  });

  test('setting autogenerated theme selects and updates icon', async () => {
    // Arrange.
    const customizeDialog = createCustomizeDialog();

    // Act.
    testProxy.callbackRouterRemote.setTheme({
      type: newTabPage.mojom.ThemeType.AUTOGENERATED,
      info: {
        autogeneratedThemeColors: {
          frame: {value: 0xff0000},
          activeTab: {value: 0x0000ff},
        },
      },
    });
    await testProxy.callbackRouterRemote.$.flushForTesting();

    // Assert.
    const selectedIcons =
        customizeDialog.shadowRoot.querySelectorAll('ntp-theme-icon[selected]');
    assertEquals(selectedIcons.length, 1);
    assertEquals(selectedIcons[0], customizeDialog.$.autogeneratedTheme);
    assertStyle(
        selectedIcons[0], '--ntp-theme-icon-frame-color', 'rgb(255, 0, 0)');
    assertStyle(
        selectedIcons[0], '--ntp-theme-icon-active-tab-color',
        'rgb(0, 0, 255)');
  });

  test('setting default theme selects and updates icon', async () => {
    // Arrange.
    const customizeDialog = createCustomizeDialog();

    // Act.
    testProxy.callbackRouterRemote.setTheme({
      type: newTabPage.mojom.ThemeType.DEFAULT,
      info: {chromeThemeId: 0},
    });
    await testProxy.callbackRouterRemote.$.flushForTesting();

    // Assert.
    const selectedIcons =
        customizeDialog.shadowRoot.querySelectorAll('ntp-theme-icon[selected]');
    assertEquals(selectedIcons.length, 1);
    assertEquals(selectedIcons[0], customizeDialog.$.defaultTheme);
  });

  test('setting Chrome theme selects and updates icon', async () => {
    // Arrange.
    const themes = [
      {
        id: 0,
        label: 'foo',
        colors: {
          frame: {value: 0x000000},
          activeTab: {value: 0x0000ff},
        },
      },
    ];
    const customizeDialog = createCustomizeDialogWithThemes(themes);

    // Act.
    testProxy.callbackRouterRemote.setTheme({
      type: newTabPage.mojom.ThemeType.CHROME,
      info: {chromeThemeId: 0},
    });
    await testProxy.callbackRouterRemote.$.flushForTesting();
    await flushTasks();

    // Assert.
    const selectedIcons =
        customizeDialog.shadowRoot.querySelectorAll('ntp-theme-icon[selected]');
    assertEquals(selectedIcons.length, 1);
    assertEquals(selectedIcons[0].getAttribute('title'), 'foo');
  });
});
